{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import erte from 'erte'\nimport erotic from 'erotic'\n\nconst equal = (a, b) => {\n  if (a != b) {\n    const e = erte(a, b)\n    const msg = `${a} != ${b}`\n    const er = new Error(`${e}\\n${msg}`) //\n    throw er\n  }\n}\n\nconst matchString = (errorMessage, m) => {\n  equal(errorMessage, m)\n}\n\nconst assertRe = (actual, re) => {\n  const res = re.test(actual)\n  if (!res) {\n    throw new Error(`${actual} does not match regular expression ${re}`)\n  }\n}\n\nfunction assertMessage({ message: errorMessage }, message) {\n  if (message instanceof RegExp) {\n    assertRe(errorMessage, message)\n  } else if (message) {\n    matchString(errorMessage, message)\n  }\n}\n\nfunction assertCode({ code: errorCode }, code) {\n  if (code instanceof RegExp) {\n    assertRe(errorCode, code)\n  } else if (code) {\n    matchString(errorCode, code)\n  }\n}\n\nfunction assertStack({ stack: errorStack }, stack) {\n  if (stack instanceof RegExp) {\n    assertRe(errorStack, stack)\n  } else if (stack) {\n    matchString(errorStack, stack)\n  }\n}\n\nconst shouldHaveThrownError = new Error('Function should have thrown.')\n\n/**\n * Assert that a function throws and check its properties.\n * @param {Config} config Parameters to the `assert-throws` method.\n * @param {function} config.fn Function to test, either sync or async.\n * @param {any[]} [config.args] Arguments to pass to the function.\n * @param {string|RegExp} [config.message] Message to test against.\n * @param {string|RegExp} [config.code] Code to test against.\n * @param {string|RegExp} [config.stack] Stack to test against.\n * @param {Error} [config.error] An error to perform strict comparison against.\n * @param {any} [config.context=\"null\"] The context in which to execute the function. Default `null`.\n * @example\n *\n * import throws from 'assert-throws'\n * import { method } from './lib'\n *\n * await throws({\n *  fn: method,\n *  args: ['test', true],\n *  message: /An error occurred:/,\n *  code: 'ENOTEST',\n * })\n */\nexport default async function assertThrows(config) {\n  const e = erotic(true)\n  const {\n    fn, message, code, stack, args = [], context = null, error,\n  } = config\n  if (typeof fn != 'function') throw new Error('function expected')\n  const isMessageRe = message instanceof RegExp\n  if (message && !isMessageRe && typeof message !== 'string') {\n    throw new Error('please pass an error message as a string or regular expression')\n  }\n\n  try {\n    await fn.call(context, ...args)\n    throw shouldHaveThrownError\n  } catch (err) {\n    if (err === shouldHaveThrownError) {\n      throw e(err)\n    }\n    if (error && error !== err) {\n      throw e(`${err} is not strict equal to ${error}.`)\n    }\n    try {\n      assertMessage(err, message)\n      assertCode(err, code)\n      assertStack(err, stack)\n    } catch ({ message }) {\n      throw e(message)\n    }\n    return e(err)\n  }\n}\n\n/* documentary types/index.xml */\n/**\n * @typedef {Object} Config Parameters to the `assert-throws` method.\n * @prop {function} fn Function to test, either sync or async.\n * @prop {any[]} [args] Arguments to pass to the function.\n * @prop {string|RegExp} [message] Message to test against.\n * @prop {string|RegExp} [code] Code to test against.\n * @prop {string|RegExp} [stack] Stack to test against.\n * @prop {Error} [error] An error to perform strict comparison against.\n * @prop {any} [context=\"null\"] The context in which to execute the function. Default `null`.\n */\n"]}