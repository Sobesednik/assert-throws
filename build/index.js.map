{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import erte from 'erte'\nimport erotic from 'erotic'\n\nconst equal = (a, b) => {\n  if (a != b) {\n    const e = erte(`${a}`, `${b}`)\n    const msg = `${a} != ${b}`\n    const er = new Error(`${e}\\n${msg}`) //\n    throw er\n  }\n}\n\nconst assertString = (errorMessage, m) => {\n  equal(errorMessage, m)\n}\n\nconst assertRe = (actual, re) => {\n  const res = re.test(actual)\n  if (!res) {\n    throw new Error(`${actual} does not match regular expression ${re}`)\n  }\n}\n\nconst assertFn = async (actual, fn) => {\n  await fn(actual)\n}\n\nconst assert = async (prop, assertion) => {\n  if (assertion instanceof RegExp) {\n    assertRe(prop, assertion)\n  } else if (typeof assertion == 'function') {\n    await assertFn(prop, assertion)\n  } else if (assertion) {\n    assertString(prop, assertion)\n  }\n}\n\n/**\n * Assert that a function throws and check the thrown error properties.\n * @param {Config} config Parameters to the `assert-throws` method.\n * @param {function} config.fn Function to test, either sync or async.\n * @param {any|any[]} [config.args] Arguments to pass to the function.\n * @param {any} [config.context] The context in which to execute the function. Global context will be set by default.\n * @param {Assertion} [config.message] A string, regex, or function to test the message.\n * @param {Assertion} [config.code] A string, regex, or function to test the code.\n * @param {Assertion} [config.stack] A string, regex, or function to test the stack.\n * @param {Assertion} [config.prop] A string, regex, or function to test any other property of the error.\n * @param {Error} [config.error] An error to perform strict comparison against.\n * @example\n *\n * import throws from 'assert-throws'\n * import { method } from './lib'\n *\n * await throws({\n *  fn: method,\n *  args: ['test', true],\n *  message: /An error occurred:/, // regex\n *  code: 'ENOTEST',               // string\n *  stack(stack) {                 // function\n *    equal(stack.length, 2)\n *  }\n * })\n */\nexport default async function assertThrows(config) {\n  if (!config) throw new Error('Config expected.')\n  const e = erotic(true)\n  const {\n    fn, args = [], context, error, ...props\n  } = config\n  if (typeof fn != 'function') throw new Error('Function expected.')\n  const arg = Array.isArray(args) ? args : [args]\n\n  try {\n    const thrownError = await wrap(fn, context, arg, error, props)\n    return thrownError\n  } catch (err) {\n    const er = e(err)\n    throw er\n  }\n}\n\nconst wrap = async (fn, context, args, error, props) => {\n  const shouldHaveThrownError = new Error()\n  try {\n    if (context) {\n      await fn.call(context, ...args)\n    } else {\n      await fn(...args)\n    }\n    throw shouldHaveThrownError\n  } catch (err) {\n    if (err === shouldHaveThrownError) {\n      const n = fn.name && fn.name !== 'fn' ? `${fn.name} ` : ''\n      throw new Error(`Function ${n}should have thrown.`)\n    }\n    if (error && error !== err) {\n      throw new Error(`${err} is not strict equal to ${error}.`)\n    }\n\n    await Object.keys(props).reduce(async (acc, k) => {\n      await acc\n      const assertion = props[k]\n      const actual = err[k]\n      await assert(actual, assertion)\n    }, {})\n\n    return err\n  }\n}\n\n/* documentary types/index.xml */\n/**\n * @typedef {string|RegExp|function} Assertion An assertion to perform.\n *\n * @typedef {Object} Config Parameters to the `assert-throws` method.\n * @prop {function} fn Function to test, either sync or async.\n * @prop {any|any[]} [args] Arguments to pass to the function.\n * @prop {any} [context] The context in which to execute the function. Global context will be set by default.\n * @prop {Assertion} [message] A string, regex, or function to test the message.\n * @prop {Assertion} [code] A string, regex, or function to test the code.\n * @prop {Assertion} [stack] A string, regex, or function to test the stack.\n * @prop {Assertion} [prop] A string, regex, or function to test any other property of the error.\n * @prop {Error} [error] An error to perform strict comparison against.\n */\n"]}